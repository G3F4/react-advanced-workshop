{"version":3,"sources":["components/layout/error-boundary/ErrorBoundary.jsx","components/layout/header/Header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ErrorBoundary","React","Component","[object Object]","args","super","this","state","hasError","error","Error","componentDidCatch","setState","render","_this$state","react_default","a","createElement","Fragment","name","message","stack","props","children","withStyles","theme","appBar","marginBottom","spacing","unit","classes","AppBar_default","position","color","className","Toolbar_default","Typography_default","variant","href","AccommodationDetailsConnect","lazy","Promise","all","__webpack_require__","e","then","bind","AccommodationList","App","error_boundary_ErrorBoundary","react_router_dom","header_Header","react","fallback","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8JA8BeA,MA5Bf,cAA4BC,IAAMC,UAAUC,eAAAC,GAAAC,SAAAD,GAAAE,KAC1CC,MAAQ,CAAEC,UAAU,EAAOC,MAAO,IAAIC,OAEtCC,kBAAkBF,GAChBH,KAAKM,SAAS,CAAEJ,UAAU,EAAMC,UAGlCI,SAAS,MAAAC,EACqBR,KAAKC,MAAzBE,EADDK,EACCL,MAER,OAHOK,EACQN,SAIXO,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WAAMR,EAAMU,MACZJ,EAAAC,EAAAC,cAAA,WAAMR,EAAMW,SACZL,EAAAC,EAAAC,cAAA,WAAMR,EAAMY,SAMbf,KAAKgB,MAAMC,sECHPC,2BAhBAC,IAAK,CAClBC,OAAQ,CACNC,aAAcF,EAAMG,QAAQC,QAcjBL,CAVA,EAAGM,aAChBf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAQgB,SAAS,SAASC,MAAM,UAAUC,UAAWJ,EAAQJ,QAC3DX,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,KACED,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAYqB,QAAQ,KAAKJ,MAAM,WAC7BlB,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,KAAR,WADF,iCCVN,MAAMC,EAA8BC,eAAK,IAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACzCC,EAAoBP,eAAK,IAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAgBtBE,MAdH,IACVjC,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAA,SAAD,CAAUC,SAAUtC,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACEvC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWjB,IAClCxB,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAK,IAAIC,UAAWT,QCHvBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlD,OAAOE,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAKyB,IACjCA,EAAaC","file":"static/js/main.8fb21444.chunk.js","sourcesContent":["import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  state = { hasError: false, error: new Error() };\n\n  componentDidCatch(error) {\n    this.setState({ hasError: true, error });\n  }\n\n  render() {\n    const { error, hasError } = this.state;\n\n    if (hasError) {\n      return (\n        <React.Fragment>\n          <h1>ERROR!</h1>\n          <div>\n            <div>{error.name}</div>\n            <div>{error.message}</div>\n            <div>{error.stack}</div>\n          </div>\n        </React.Fragment>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// @ts-ignore\nexport default ErrorBoundary;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport { withStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  appBar: {\n    marginBottom: theme.spacing.unit,\n  },\n});\n\nconst Header = ({ classes }) => (\n  <AppBar position=\"static\" color=\"default\" className={classes.appBar}>\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\">\n        <a href=\"/\">BOOK IT</a>! THE BEST BOOKING HELPER!\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default withStyles(styles)(Header);\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ErrorBoundary from './components/layout/error-boundary/ErrorBoundary';\nimport Header from './components/layout/header/Header';\n\nconst AccommodationDetailsConnect = lazy(() => import('./components/views/accommodation-details/AccommodationDetailsConnect'));\nconst AccommodationList = lazy(() => import('./components/views/accommodation-list/AccommodationList'));\n\nconst App = () => (\n  <ErrorBoundary>\n    <Router>\n      <Header/>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route path=\"/details\" component={AccommodationDetailsConnect} />\n          <Route exact path=\"/\" component={AccommodationList} />\n        </Switch>\n      </Suspense>\n    </Router>\n  </ErrorBoundary>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}